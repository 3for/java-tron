import java.text.SimpleDateFormat

allprojects {
    version = "1.0.0"
    apply plugin: "java-library"
}

subprojects {
    apply plugin: "jacoco"
    apply plugin: "maven-publish"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    buildscript {
        repositories {
            mavenCentral()
            maven { url 'https://jitpack.io' }
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
        dependencies {
            classpath 'com.google.protobuf:protobuf-gradle-plugin:0.9.1'
            classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.2"
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://repo.spring.io/plugins-release' }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
        implementation group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.25'
        implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.9'
        implementation "com.google.code.findbugs:jsr305:3.0.0"
        implementation group: 'org.springframework', name: 'spring-context', version: '5.3.18'
        implementation group: 'org.springframework', name: 'spring-tx', version: '5.3.18'
        implementation "org.apache.commons:commons-lang3:3.4"
        implementation group: 'org.apache.commons', name: 'commons-math', version: '2.2'
        implementation "org.apache.commons:commons-collections4:4.1"
        implementation group: 'joda-time', name: 'joda-time', version: '2.3'
        implementation group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.69'

        compileOnly 'org.projectlombok:lombok:1.18.12'
        annotationProcessor 'org.projectlombok:lombok:1.18.12'
        testCompileOnly 'org.projectlombok:lombok:1.18.12'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'

        testImplementation group: 'junit', name: 'junit', version: '4.13.2'
        testImplementation "org.mockito:mockito-core:2.13.0"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = "sources"
        from sourceSets.main.allSource
        duplicatesStrategy = DuplicatesStrategy.INCLUDE // allow duplicates
    }


    tasks.withType(AbstractArchiveTask) {
        preserveFileTimestamps = false
        reproducibleFileOrder = true
        duplicatesStrategy = DuplicatesStrategy.INCLUDE // allow duplicates
    }
}

task copyToParent(type: Copy) {
    into "$buildDir/libs"
    subprojects {
        from tasks.withType(Jar)
    }
}

def getGitCommitDetails(length = 8) {
    try {
        def gitFolder = "$projectDir/.git/"
        if (!file(gitFolder).isDirectory()) {
            gitFolder = file(gitFolder).text.substring(length).trim() + "/"
        }
        def takeFromHash = length
        def head = new File(gitFolder + "HEAD").text.split(":")
        def isCommit = head.length == 1

        def commitHash, refHeadFile
        if (isCommit) {
            commitHash = head[0].trim().take(takeFromHash)
            refHeadFile = new File(gitFolder + "HEAD")
        } else {
            refHeadFile = new File(gitFolder + head[1].trim())
            commitHash = refHeadFile.text.trim().take(takeFromHash)
        }

        // Use head file modification time as a proxy for the build date
        def lastModified = new Date(refHeadFile.lastModified())
        // Format the date as "yy.M" (e.g. 24.3 for March 2024)
        def formattedDate = new SimpleDateFormat("yy.M").format(lastModified)

        return [hash: commitHash, date: formattedDate]
    } catch (Exception e) {
        logger.warn('Could not calculate git commit details, using defaults (run with --info for stacktrace)')
        logger.info('Error retrieving git commit details', e)
        return [hash: "xxxxxxxx", date: "00.0"]
    }
}

// http://label-schema.org/rc1/
// using the RFC3339 format "2016-04-12T23:20:50.52Z"
def buildTime() {
    def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

// set the shell command to use according to os
def shell = org.gradle.internal.os.OperatingSystem.current().isWindows() ? "${projectDir}\\wslsh.bat" : '/bin/bash'

def dockerBuildVersion = project.hasProperty('release.releaseVersion') ? project.property('release.releaseVersion') : "${rootProject.version}"
def dockerOrgName = project.hasProperty('dockerOrgName') ? project.getProperty("dockerOrgName") : "dockerrepomia"
def dockerArtifactName = project.hasProperty("dockerArtifactName") ? project.getProperty("dockerArtifactName") : "trontest"
def dockerImageName = "${dockerOrgName}/${dockerArtifactName}"

task sourceDocker {
    def dockerBuildDir = "build/docker-tron/"

    doLast {
        copy {
            from file("${projectDir}/docker/Dockerfile")
            into(dockerBuildDir)
        }
        copy {
            from file("${projectDir}/docker/docker-entrypoint.sh")
            into "${dockerBuildDir}"
        }
        exec {
            def image = "${dockerImageName}:${dockerBuildVersion}"
            def dockerPlatform = ""
            if (project.hasProperty('docker-platform')){
                dockerPlatform = "--platform ${project.getProperty('docker-platform')}"
                println "Building for platform ${project.getProperty('docker-platform')}"
            }
            def gitDetails = getGitCommitDetails(7)
            executable shell
            workingDir dockerBuildDir
            args "-c", "docker build ${dockerPlatform} --build-arg BUILD_DATE=${buildTime()} --build-arg VERSION=${dockerBuildVersion} --build-arg VCS_REF=${gitDetails.hash} -t ${image} ."
        }
    }
}

// Takes the version and if it contains SNAPSHOT, alpha, beta or RC in version then return true indicating an interim build
def isInterimBuild(dockerBuildVersion) {
    return (dockerBuildVersion ==~ /.*-SNAPSHOT/) || (dockerBuildVersion ==~ /.*-alpha/)
            || (dockerBuildVersion ==~ /.*-beta/) || (dockerBuildVersion ==~ /.*-RC.*/)
            || (dockerBuildVersion ==~ /.*develop.*/)
}

// Make sure to `docker login` first
task dockerUpload {
    dependsOn sourceDocker
    def architecture = System.getenv('architecture')
    if (architecture == null) {
        architecture = "amd64" //set default as amd64
    }
    def image = "${dockerImageName}:${dockerBuildVersion}"
    def additionalTags = []

    if (project.hasProperty('branch') && project.property('branch') == 'main') {
        additionalTags.add('develop')
    }

    if (!isInterimBuild(dockerBuildVersion)) {
        additionalTags.add(dockerBuildVersion.split(/\./)[0..1].join('.'))
    }

    doLast {
        exec {
            def archVariantImage = "${image}-${architecture}"
            def cmd = "docker tag '${image}' '${archVariantImage}' && docker push '${archVariantImage}'"
            println "Executing '${cmd}'"
            executable shell
            args "-c", cmd
        }
    }
}

build.finalizedBy(copyToParent)

gradle.buildFinished {
    if (project.hasProperty('cleanSubBuild')) {
        subprojects {
            buildDir.deleteDir()
        }
    }
}
